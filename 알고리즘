#include<iostream>
#include<string>
#include<vector>
using namespace std;
int N,Total;
string List="";
vector<int> cost;
bool compare(string A,string B)
{
	if(A.size()!=B.size()) return A.size()>B.size();
	for(int i=0;i<A.size();i++)
	{
		if(A[i]!=B[i]) return (int(A[i]-'0')>int(B[i]-'0'));
	}
return true;
}
void dfs(int depth,int T,string temp)
{
	if(depth==3) return;
	for(int i=0;i<N;i++)
	{
		string example=temp;
		example.push_back(char('0'+i));
		if(depth==0&&i==0) continue;
		if(Total-cost[i]<0) { example.erase(example.end()-1,example.end());
		if(compare(temp,List)) List=temp;
		}
		else dfs(depth+1,T-cost[i],example);
	}
}	
int main()
{
ios_base::sync_with_stdio(false);
cin.tie(0);
cin>>N; 
cost.resize(N);
for(int i=0;i<N;i++) cin>>cost[i];
cin>>Total;	
dfs(0,Total,List);
cout<<List<<"Good";
return 0;
}
